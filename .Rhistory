install.packages("solidify")
load(swirl)
swirl
package_version(swirl)
demo()
swirl
packages.instal(swirl)
installed.packages()
swirl
swirl::nxt()
swirl::nxt()
swirl::play()
swirl::main()
load(swirl)
load(swirl.R)
library(swirl)
swirl()
TRUE==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
!(5==7)
FALSE&FALSE
TRUE&c(TRUE,FALSE,FALSE)
TRUE&&c(TRUE,FALSE,FALSE)
TRUEE|C(TRUE,FALSE,FALSE)
TRUE|C(TRUE,FALSE,FALSE)
TRUE|c(TRUE,FALSE,FALSE)
TRUE||c(TRUE,FALSE,FALSE)
5>8||6!=8&&4>3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6,!FALSE)
ints<-sample(10)
ints
ints>5
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function()
boring_function
submit()
my_mean(c(4,5,10))
submit()
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11,num=5)
remainder(4,div=2)
agrs(remainder)
args(remainder)
submit()
submit()
submit
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
help
?submit()
?submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
evaluate <- function(func, dat){
# Write your code here!
# Remember: the last expression evaluated will be returned!
add<-function(dat){
sum(dat)
}
func<-add
}
evaluate(add,c(1,3,4))
submit()
submit()
evaluate <- function(func, dat){
# Write your code here!
# Remember: the last expression evaluated will be returned!
add<-function(x){
x<-sum(dat)
}
func<-add
}
evaluate(add,c(1,3,4))
submit()
submit
submit()
submit()
library(swirl)
swirl()
source('/var/folders/n0/1_kbq2_j4cvd37s8t0sfxlkm0000gn/T//RtmpL0jq4S/evaluate.R')
View(remainder)
View(remainder)
submit()
submit()
submit()
submit()
submit()
evaluate(sum,c(1123,4,2))
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x{x+1},6))
evaluate(function(x{x+1},6)
evaluate(function(x){x+1},6)
evaluate(function(x)x[1],c(8,4,0))
evaluate(function(x)x[length(x)],c(8,4,0))
?paste
paste("Programming", "is","fun")
paste("Programming", "is","fun!")
?ellipses
?ellipses_func
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
?ellip
telegram("stef")
submit()
submit()
submit()
submit()
submit()
telegram("ce bou sunt")
submit()
submit()
mad_libs("salam","barbos","da")
submit()
submit()
'I'%p%'love'%p%"R!"
pollutantmean("specdata","sulphate",1:10)
pollutantmean
pollutantmean<-function(directory,pollutant,id=1:332){
filenames <- list.files(directory, full.names = TRUE)
if (length(id) == 1) {
filename <- filenames[id]
selectdata <- read.csv(filename, header = TRUE)
mean(selectdata[, polutant], na.rm = TRUE)
}
}
pollutantmean("specdata","sulphate",1:10)
pollutantmean("specdata","sulphate",1:10)
}
pollutantmean("specdata","sulfate",1:20)
pollutantmean("specdata","sulfate",1:20)
pollutantmean("specdata","sulfate",1:20)
pollutantmean("specdata","sulfate",1:20)
pollutantmean("specdata","sulfate",23)
pollutantmean("specdata","sulfate",23)
pollutantmean("specdata","sulfate",23)
pollutantmean("specdata","sulfate",23)
pollutantmean("specdata","sulfate",23)
pollutantmean("specdata","sulfate",23)
?generatedataframes
utils.r
?utils.r
??utils.r
install.packages(utils.R)
install.packages(utils)
installed.packages()
source('~/pollutantmean.R')
PollutantMean("specdata", "nitrate", 23)
PollutantMean("specdata", "nitrate", 23)
PollutantMean("specdata", "nitrate", 23)
pollutantmean("specdata", "nitrate", 23)
pollutantmean("specdata", "nitrate", 23)
pollutantmean("specdata", "nitrate", 23)
pollutantmean("specdata", "nitrate", 23)
source("utils.R")
if (pollutant != "sulfate" && pollutant != "nitrate") {
stop("Argument pollutant must either be sulfate or nitrate: ",
pollutant, ".")
}
listOfDataFrames <- GenerateDataFramesFromCSV(directory, id)
# Generate a single dataframe from our list of data frames
df <- ldply(listOfDataFrames)
# Calculate the mean and place the results in a vector
pollutantmean <- mean(df[, pollutant], na.rm=TRUE)
return(pollutantMean)
source("utils.R")
if (pollutant != "sulfate" && pollutant != "nitrate") {
stop("Argument pollutant must either be sulfate or nitrate: ",
pollutant, ".")
}
listOfDataFrames <- GenerateDataFramesFromCSV(directory, id)
# Generate a single dataframe from our list of data frames
df <- ldply(listOfDataFrames)
# Calculate the mean and place the results in a vector
pollutantmean <- mean(df[, pollutant], na.rm=TRUE)
return(pollutantmean)
pollutantmean <- mean(df[, pollutant], na.rm=TRUE)
pollutantmean <- mean(df[, pollutant], na.rm=TRUE)
PollutantMean("specdata", "nitrate", 23)
# Calculate the mean and place the results in a vector
PollutantMean("specdata", "nitrate", 23)
}
}
PollutantMean("specdata", "nitrate", 23)
return(PollutantMean)
PollutantMean("specdata", "nitrate", 23)
pollutantmean2(directory,pollutant,id=1:332){
setwd("~/Documents/datasharing")
pollu
}
pollutantmean2("source","sulfat",20)
pollutantmean2(directory,pollutant,id=1:332){
list_dir<-list.files(directory, full.names=TRUE)
empty_frame<-data.frame()
for (i in id){
pollmean<-rbind(empty_frame, read.csv(list_dir[i]))
}
mean(pollmean)
}
}
}
pollutantmean2(directory,pollutant,id=1:332){
list_dir<-list.files(directory, full.names=TRUE)
empty_frame<-data.frame()
for (i in id){
pollmean<-rbind(empty_frame, read.csv(list_dir[i]))
}
mean(empty_frame[,pollutant], na.rm=TRUE)
}
pollutantmean2(directory,pollutant,id=1:332){
list_dir<-list.files(directory, full.names=TRUE)
empty_frame<-data.frame()
for (i in id){
pollmean<-rbind(empty_frame, read.csv(list_dir[i]))
}
mean(empty_frame[ ,pollutant], na.rm=TRUE)
}
pollutantmean2<-function(directory,pollutant,id=1:332){
list_dir<-list.files(directory, full.names=TRUE)
empty_frame<-data.frame()
for (i in id){
pollmean<-rbind(empty_frame, read.csv(list_dir[i]))
}
mean(empty_frame[ ,pollutant], na.rm=TRUE)
}
pollutantmean2()
pollutantmean2("specdata","nitrate", 1:20)
pollutantmean2("specdata","nitrate", 1)
pollutantmean2("specdata","sulfat", 1)
pollutantmean2<-function(directory,pollutant,id=1:332){
list_dir<-list.files(directory, full.names=TRUE)
empty_frame<-data.frame()
for (i in id){
empty_frame<-rbind(empty_frame, read.csv(list_dir[i]))
}
mean(empty_frame[ ,pollutant], na.rm=TRUE)
}
pollutantmean2("specdata","sulfat", 1)
pollutantmean2<-function(directory,pollutant,id=1:332){
list_dir<-list.files(directory, full.names=TRUE)
empty_frame<-data.frame()
for (i in id){
empty_frame<-rbind(empty_frame, read.csv(list_dir[i]))
}
mean(empty_frame[ ,pollutant], na.rm=TRUE)
}
pollutantmean2("specdata","sulfate",1:20)
pollutantmean <- function(directory, pollutant, id = 1:332) {
files_full <- list.files(directory, full.names = TRUE)
dat <- data.frame()
for (i in id) {
dat <- cbind(dat, read.csv(files_full[i]))
}
mean(dat[, pollutant], na.rm = TRUE)
}
pollutantmean("specdata","sulfate",1:20)
pollutantmean <- function(directory, pollutant, id = 1:332) {
files_full <- list.files(directory, full.names = TRUE)
dat <- data.frame()
for (i in id) {
dat <- rbind(dat, read.csv(files_full[i]))
}
mean(dat[, pollutant], na.rm = TRUE)
}
pollutantmean("specdata","sulfate",1:20)
?cbind
str(split)
mean(x)
traceback()
package_version(swirl)
package_version("swirl")
package_version()
library("swirl")
swirl()
head(flags)
dim(flags)
class(flags)
as.list(flags)
<-lapply(flags,class)
cls_list<-lapply(flags,class)
class
class()
?class()
cls_list
class(cls_list)
as.character(cls_list)
sapply(cls_list,class)
sapply(flags,class)
cls_vect<-sapply(flags,class)
class(class_vect)
class(cls_vect)
sum(flags$orange)
flag_colors<-flags[,11:17]
head(flag_colors)
lapply(cls_vect,sum)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes<-flags[,19:23]
lapply(flags,range)
lapply(flag_shapes,range)
sapply(flag_shapes,range)
shape_mat<-sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals<-lapply(flags,unique)
unique_vals
length(unique_vals)
sapply(unique_vals,length)
lapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
flags$landmass
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass,mean)
tapply(flags$polulation,flags$red,summary)
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags,summary)
tapply(flags$population,landmass,summary)
tapply(flags$population,flags$landmass,summary)
library(datasets)
data("iris")
?iris
tapply(iris,iris$Sepal.Length,mean)
tapply(iris$virginica,iris$Sepal.Length,mean)
tapply(iris$virginica,iris$Sepal,mean)
iris
tapply(iris$Species,iris$Sepal,mean)
tapply(iris$Species,iris$Sepal.Length,mean)
sapply(iris$Species,iris$Sepal.Length,mean)
tapply(iris$Species,iris$Sepal.Length,mean)
warnings()
tapply(iris$Species,iris$Sepal.Length,summary)
sapply(iris$Sepal.Length,mean)
?iris
tapply(iris$Species=virginica,iris$Sepal.Length,mean)
tapply(iris$Species="virginica",iris$Sepal.Length,mean)
tapply(iris$Species,iris$Sepal.Length,mean)
tapply(iris$Species,iris$Sepal.Length,mean("virginica"))
colmeans(iris)
colMeans(iris)
colMeans("iris")
rowMeans(iris)
apply(iris,1,mean)
apply(iris[,1:4],mean)
apply(iris[,1:4],,2,mean)
apply(iris[,1:4],2,mean)
?apply
library(datasets)
data(mtcars)
?mtcars
mean(mtcars$mpg, mtcars$cyl)
mean(mtcars$mpg, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply
sapply(mtcars, cyl, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
mtcars$cyl
tapply(mtcars$hp,mtcars$cyl)
tapply(mtcars$hp,mtcars$cyl,summary)
209-82
debug(ls)
ls(iris)
stop
stop
Q
setwd("~/Documents/ProgrammingAssignment2")
ProgrammingAssignment
true
ls(true)
?browser
q
QQf
F
f
q
if (!missing(name)) {
ProgrammingAssignment
function (name, pos = -1L, envir = as.environment(pos), all.names = FALSE,
pattern, sorted = TRUE)
{
if (!missing(name)) {
pos <- tryCatch(name, error = function(e) e)
if (inherits(pos, "error")) {
name <- substitute(name)
if (!is.character(name))
name <- deparse(name)
warning(gettextf("%s converted to character string",
sQuote(name)), domain = NA)
pos <- name
}
}
all.names <- .Internal(ls(envir, all.names, sorted))
if (!missing(pattern)) {
if ((ll <- length(grep("[", pattern, fixed = TRUE))) &&
ll != length(grep("]", pattern, fixed = TRUE))) {
if (pattern == "[") {
pattern <- "\\["
warning("replaced regular expression pattern '[' by  '\\\\['")
}
else if (length(grep("[^\\\\]\\[<-", pattern))) {
pattern <- sub("\\[<-", "\\\\\\[<-", pattern)
warning("replaced '[<-' by '\\\\[<-' in regular expression pattern")
}
}
grep(pattern, all.names, value = TRUE)
}
else all.names
}
stop
f
debuggingState(on=FALSE)
ls()
ls(telegram)
ls("telegram")
ProgrammingAssignment2.R
open(ProgrammingAssignment.R)
getwd()
setwd("~/Documents/ProgrammingAssignment2")
getwd()
open(ProgrammingAssignment2.R)
open(cachematrix.R)
cachematrix.R
cachematrix.R
